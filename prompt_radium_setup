#
# A ZSH theme based on swkp prezto theme, the robl ohmyzsh theme, and the paradox prezto theme.
#  * Single line prompt
#  * User@hostname on the left
#  * Git branch info on the left
#  * Time since last commit on the left
#  * Time of execution on the right
#
# Authors:
#   Dimitar Dimitrov <dimitrov.inc@gmail.com>
#
# Radium User Environment Variables:
#   RADIUM_USER_BLOCK = TRUE

# Radium colors
RADIUM_LEFT_USER_HOSTNAME_BG=%K{black}
RADIUM_LEFT_DIR_BG=%K{blue}
RADIUM_LEFT_VCS_BG=%K{green}
RADIUM_LEFT_GIT_COMMIT_TIME_BG=%K{136}

RADIUM_CURRENT_BG='NONE'
RADIUM_SEPARATOR=$'\u2b80'

# return true if specified VCS is available in directory
function is_git_repo() {
}

# returns the time since last git commit
function git_time_details() {
  # only proceed if there is actually a git repository
  if `git rev-parse --git-dir > /dev/null 2>&1`; then
    # only proceed if there is actually a commit
    if [[ $(git log 2>&1 > /dev/null | grep -c "^fatal: bad default revision") == 0 ]]; then
      # get the last commit hash
      # lc_hash=`git log --pretty=format:'%h' -1 2> /dev/null`
      # get the last commit time
      lc_time=`git log --pretty=format:'%at' -1 2> /dev/null`

      now=`date +%s`
      seconds_since_last_commit=$((now-lc_time))
      lc_time_since=`time_since_commit $seconds_since_last_commit`

      echo "$lc_time_since"
    else
      echo ""
    fi
  else
    echo ""
  fi
}

# returns the time by given seconds
function time_since_commit() {
  seconds_since_last_commit=$(($1 + 0))

  # totals
  MINUTES=$((seconds_since_last_commit / 60))
  HOURS=$((seconds_since_last_commit/3600))

  # sub-hours and sub-minutes
  DAYS=$((seconds_since_last_commit / 86400))
  SUB_HOURS=$((HOURS % 24))
  SUB_MINUTES=$((MINUTES % 60))

  if [ "$HOURS" -gt 24 ]; then
    echo "${DAYS}d${SUB_HOURS}h${SUB_MINUTES}m"
  elif [ "$MINUTES" -gt 60 ]; then
    echo "${HOURS}h${SUB_MINUTES}m"
  else
    echo "${MINUTES}m"
  fi
}

function prompt_radium_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$RADIUM_CURRENT_BG" != 'NONE' && "$1" != "$RADIUM_CURRENT_BG" ]]; then
    print -n " $bg%F{$RADIUM_CURRENT_BG}$RADIUM_SEPARATOR$fg "
  else
    print -n "$bg$fg "
  fi
  RADIUM_CURRENT_BG="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_radium_end_segment {
  if [[ -n "$RADIUM_CURRENT_BG" ]]; then
    print -n " %k%F{$RADIUM_CURRENT_BG}$RADIUM_SEPARATOR"
  else
    print -n "%k"
  fi
  print -n "%f"

  RADIUM_CURRENT_BG=''
}

function prompt_radium_construct_prompt() {

  if [[ -n "$RADIUM_USER_BLOCK" ]]; then
    if [[ "$RADIUM_USER_BLOCK" == 1 ]]; then
      prompt_radium_start_segment black default '%F{white}%n%f%F{red} @ %f%F{blue}%m%f'
    fi
  else
    prompt_radium_start_segment black default '%F{white}%n%f%F{red} @ %f%F{blue}%m%f'
  fi

  prompt_radium_end_segment
}

function prompt_radium_precmd {
  # Check for untracked files or updated submodules since vcs_info doesn't.
  if [[ ! -z $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    fmt_branch="%b%u%c${__PROMPT_SKWP_COLORS[4]}●%f"
  else
    fmt_branch="%b%u%c"
  fi
  zstyle ':vcs_info:*:prompt:*' formats "${fmt_branch}"

  vcs_info 'prompt'
}

function prompt_radium_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  add-zsh-hook precmd prompt_radium_precmd

  # Use extended color pallete if available.
  if [[ $TERM = *256color* || $TERM = *rxvt* ]]; then
    __PROMPT_SKWP_COLORS=(
      "%F{81}"  # turquoise
      "%F{166}" # orange
      "%F{135}" # purple
      "%F{161}" # hotpink
      "%F{118}" # limegreen
    )
  else
    __PROMPT_SKWP_COLORS=(
      "%F{cyan}"
      "%F{yellow}"
      "%F{magenta}"
      "%F{red}"
      "%F{green}"
    )
  fi

  # Enable VCS systems you use.
  zstyle ':vcs_info:*' enable bzr git hg svn

  # check-for-changes disabled for performance reasons
  zstyle ':vcs_info:*:prompt:*' check-for-changes false

  # local fmt_branch="(${__PROMPT_SKWP_COLORS[1]}%b%f%u%c)"
  local fmt_branch="${__PROMPT_SKWP_COLORS[2]}%b%f%u%c"
  local fmt_action="${__PROMPT_SKWP_COLORS[5]}%a%f"
  local fmt_unstaged="${__PROMPT_SKWP_COLORS[2]}●%f"
  local fmt_staged="${__PROMPT_SKWP_COLORS[5]}●%f"

  zstyle ':vcs_info:*:prompt:*' unstagedstr   "${fmt_unstaged}"
  zstyle ':vcs_info:*:prompt:*' stagedstr     "${fmt_staged}"
  zstyle ':vcs_info:*:prompt:*' actionformats "${fmt_branch}${fmt_action}"
  zstyle ':vcs_info:*:prompt:*' formats       "${fmt_branch}"
  zstyle ':vcs_info:*:prompt:*' nvcsformats   ""

  # RADIUM_LEFT_USER_HOSTNAME="$RADIUM_LEFT_USER_HOSTNAME_BG%F{white}%n%f%F{red} @ %f%F{blue}%m %f%k%F{black}$RADIUM_LEFT_DIR_BG"$RADIUM_SEPARATOR
  # RADIUM_LEFT_DIR="$RADIUM_LEFT_DIR_BG%F{white} %~ %k%f%F{blue}$RADIUM_LEFT_VCS_BG"$RADIUM_SEPARATOR
  # RADIUM_LEFT_VCS="%k%f%F{white}$RADIUM_LEFT_VCS_BG "'${vcs_info_msg_0_}'" %k%f%F{green}$RADIUM_LEFT_GIT_COMMIT_TIME_BG"$RADIUM_SEPARATOR
  # RADIUM_LEFT_GIT_COMMIT_TIME="%k%f%F{white}$RADIUM_LEFT_GIT_COMMIT_TIME_BG "'$(git_time_details)'" %k%f%F{136}"$RADIUM_SEPARATOR"%f "

  # PROMPT=$RADIUM_LEFT_USER_HOSTNAME$RADIUM_LEFT_DIR$RADIUM_LEFT_VCS$RADIUM_LEFT_GIT_COMMIT_TIME
  PROMPT='${(e)$(prompt_radium_construct_prompt)}'
  RPROMPT='%F{blue}[%F{green}%D{%H:%M:%S}%F{blue}]%f'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_radium_setup "$@"
